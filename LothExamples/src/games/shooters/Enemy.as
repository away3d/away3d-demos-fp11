package games.shooters {	import away3d.containers.Scene3D;	import away3d.entities.Mesh;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform ;	import flash.geom.Vector3D;	import flash.events.Event;	import flash.display.Sprite;	/**	 * Enemy	 * Create, move and destroy	 */	public class Enemy extends Sprite {		private static var Singleton : Enemy;		[Embed(source="assets/sounds/Spacefly.mp3")]		public static var Shot : Class;		private static var _sound : Sound;		private static var _channel : SoundChannel;		private static var _volume : SoundTransform;		private static var _scene : Scene3D;		private static var _enemys : Vector.<Mesh>;		private static var _model : Mesh;		private static var _viewLimit : Vector3D;		private static var _shootEvery : int = 50;		// enemy variable vector		private static var _enemysHealth : Vector.<int>;		private static var _enemysSpeed : Vector.<int>;		private static var _enemysWobble : Vector.<int>;		private static var _enemysShootCount : Vector.<int>;		private static var _isRun:Boolean;		/**		 * Singleton enforcer		 */		public static function getInstance() : Enemy {			if (Singleton == null) Singleton = new Enemy();			return Singleton;		}		static public function init(model : Mesh, Lx : int = 2000, Ly : int = 1000, Lz : int = 1000) : void {			_viewLimit = new Vector3D(Lx, Ly, Lz);			_volume = new SoundTransform();			_channel = new SoundChannel();			_volume.volume = 0.06;			_sound = new Shot();			_enemys = new Vector.<Mesh>();			_enemysHealth = new Vector.<int>();			_enemysSpeed = new Vector.<int>();			_enemysWobble = new Vector.<int>();			_enemysShootCount = new Vector.<int>();			_model = model;			_model.rotationZ = 180;			// separate enterframe			start();		}		public static function get enemys() : Vector.<Mesh> {			return _enemys;		}		public static function get enemysSpeed() : Vector.<int> {			return _enemysSpeed;		}		static public function set scene(Scene : Scene3D) : void {			_scene = Scene;		}		static public function addEnemy() : void {			// _channel = _sound.play();			// _channel.soundTransform = _volume;			var b : Mesh = Mesh(_model.clone());			b.position = new Vector3D(-_viewLimit.x, (Math.random() * _viewLimit.y) + 600, _viewLimit.z);			_scene.addChild(b);			_enemys.push(b);			_enemysHealth.push(3);			_enemysShootCount.push(0);			// give it a random speed velocity			_enemysSpeed.push(int(Math.random() * 20 + 10));			// move up and down or stay on line			var wob : int = int(Math.random() * 20);			if (wob < 10) _enemysWobble.push(wob);			else _enemysWobble.push(0);		}		// this logic will happen at frame rate		private static function update(e : Event = null) : void {			for (var i : int; i < _enemys.length; i++) {				_enemys[i].x += _enemysSpeed[i];				// increment shoot and shoot if maximum reach				_enemysShootCount[i]++;				if (_enemysShootCount[i] == _shootEvery) {					BulletEnemy.shoot(_enemys[i], _enemysSpeed[i]);					_enemysShootCount[i] = 0;				}				// move up and down				if (_enemysWobble[i] != 0) {					if (_enemysWobble[i] > 0 && _enemys[i].y > (_viewLimit.y + 600)) _enemysWobble[i] *= -1;					else if (_enemysWobble[i] < 0 && _enemys[i].y < 600) _enemysWobble[i] *= -1;					_enemys[i].y += _enemysWobble[i];					_enemys[i].rotationX += _enemysWobble[i] / 10;				}				// kill enemy if out of screen				if (_enemys[i].position.x > _viewLimit.x) kill(i);				// kill enemy if health to 0				if (_enemysHealth[i] == 0) {					Stat.updateStat("kills", 1);					Stat.updateStat("points", 100);					kill(i);				}			}		}		// when enemy gets hit by a bullet from the hero ship		public static function takeDamage(n : uint, d : int) : void {			_enemysHealth[n] -= d;			Stat.updateStat("hits", 1);		}		// destroy enemy		private static function kill(n : uint) : void {			_scene.removeChild(_enemys[n]);			_enemys.splice(n, 1);			_enemysHealth.splice(n, 1);			_enemysSpeed.splice(n, 1);			_enemysWobble.splice(n, 1);			_enemysShootCount.splice(n, 1);		}				public static function pause() : void {			Singleton.removeEventListener(Event.ENTER_FRAME, update);			_isRun = false;		}		public static function start() : void {			if(_isRun) return;			Singleton.addEventListener(Event.ENTER_FRAME, update, false, 0, true);			_isRun = true;		}	}}