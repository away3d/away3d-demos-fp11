package games.shooters {	import away3d.primitives.PlaneGeometry;	import away3d.utils.Cast;	import away3d.primitives.SphereGeometry;	import away3d.materials.TextureMaterial;	import away3d.containers.Scene3D;	import away3d.entities.Mesh;	import flash.events.Event;	import flash.display.Sprite;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform ;	import flash.geom.Vector3D;	import flash.display.BitmapData;	/**	 * Enemy bullet 	 * create, move and check collision with player ship	 */	public class BulletEnemy extends Sprite {		private static var Singleton : BulletEnemy;		[Embed(source="assets/sounds/Gun.mp3")]		public static var Shot : Class;		// the bullets will have a speed		public static var _speed : int;		private static var _sound : Sound;		private static var _channel : SoundChannel;		private static var _volume : SoundTransform;		private static var _scene : Scene3D;		private static var _bullets : Vector.<Mesh>;		private static var _bulletsSpeed : Vector.<int>;		private static var _bullet : Mesh;		private static var _viewLimit : int;		private static const ZONEHIT : int = 50;		private static var _isRun : Boolean;		/**		 * Singleton enforcer		 */		public static function getInstance() : BulletEnemy {			if (Singleton == null) Singleton = new BulletEnemy();			return Singleton;		}		static public function init(ViewLimit : int = 2000) : void {			_viewLimit = ViewLimit;			_volume = new SoundTransform();			_channel = new SoundChannel();			_volume.volume = .03;			_sound = new Shot();			_bullets = new Vector.<Mesh>();			_bulletsSpeed = new Vector.<int>();			_speed = 40;			var material : TextureMaterial = new TextureMaterial(Cast.bitmapTexture(new BitmapData(4, 4, false, 0xFF9000)));			var materialGlow : TextureMaterial = new TextureMaterial(Cast.bitmapTexture(Graph.BulletGlow(0xFF9000)));			materialGlow.alphaBlending = true;			_bullet = new Mesh(new SphereGeometry(20, 6, 6), material);			var g : Mesh = new Mesh(new PlaneGeometry(150, 150, 1, 1), materialGlow);			g.rotationX = 90;			_bullet.addChild(g);			start();		}		public static function set scene(Scene : Scene3D) : void {			_scene = Scene;		}		public static function shoot(p : Mesh, pSpeed : int = 0) : void {			// _channel = _sound.play();			// _channel.soundTransform = _volume;			var b : Mesh = Mesh(_bullet.clone());			b.position = p.position.add(new Vector3D(100, 0, 0));			_scene.addChild(b);			// _bullets.push(b);			_bullets[_bullets.length] = b;			_bulletsSpeed.push(_speed + pSpeed);		}		private static function update(e : Event = null) : void {			var i : uint;			for ( i = 0;  i < _bullets.length; i++) {				_bullets[i].x += _bulletsSpeed[i];				// if this bullet is hitting the player ship				if (proximity(_bullets[i], Ship.position)) {					// add damage to player ship					Ship.takeDamage(10);					// destroy bullet					kill(i);					return;				}				// destroy bullet if out of screen				if (_bullets[i].x > _viewLimit) {					kill(i);				}			}		}		private static function proximity(A : Mesh, B : Vector3D) : Boolean {			var ax : int = ((A.x + _viewLimit) - (B.x + _viewLimit)) >> 0;			var ay : int = (A.y - B.y) >> 0;			if ( ax < ZONEHIT && ax > -ZONEHIT && ay < ZONEHIT && ay > -ZONEHIT) return true;			else return false;		}		private static function kill(n : uint) : void {			_bullets[n].removeChild(_bullets[n].getChildAt(0));			_scene.removeChild(_bullets[n]);			_bullets.splice(n, 1);			_bulletsSpeed.splice(n, 1);		}		public static function pause() : void {			Singleton.removeEventListener(Event.ENTER_FRAME, update);			_isRun = false;		}		public static function start() : void {			if (_isRun) return;			Singleton.addEventListener(Event.ENTER_FRAME, update, false, 0, true);			_isRun = true;		}	}}